-- File: ../generated/vhdl/pyleros_alu.vhd
-- Generated by MyHDL 1.0dev
-- Date: Thu Aug 18 20:09:07 2016



package pck_pyleros_alu is

attribute enum_encoding: string;

    type t_enum_alu_op_type_1 is (
    NOP,
    LD,
    AND,
    OR,
    XOR
);

end package pck_pyleros_alu;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_10.all;

use work.pck_pyleros_alu.all;

entity pyleros_alu is
    port (
        alu_op: in t_enum_alu_op_type_1;
        acc: in unsigned(15 downto 0);
        opd: in unsigned(15 downto 0);
        pre_acc: out unsigned(15 downto 0);
        ioin_rd_data: in unsigned(15 downto 0);
        dec_br_op: in std_logic;
        dec_indls: in std_logic;
        dec_sel_imm: in std_logic;
        dec_inp: in std_logic;
        dec_outp: in std_logic;
        dec_log_add: in std_logic;
        dec_jal: in std_logic;
        dec_shr: in std_logic;
        dec_loadh: in std_logic;
        dec_ah_ena: in std_logic;
        dec_store: in std_logic;
        dec_al_ena: in std_logic;
        dec_add_sub: in std_logic
    );
end entity pyleros_alu;
-- The alu module for pyleros, purely combinatorial
-- 
-- Arguments (ports):
--     dec: IN The decoder control signals
--     acc: IN The accumulator
--     opd: IN Operand, based on whether the instruction is 
--         immediate or not
--     pre_acc: OUT The result of the ALU operation, from the acc mux
-- 
-- Parameters:
--     None

architecture MyHDL of pyleros_alu is



signal res_arith: unsigned(15 downto 0);
signal res_log: unsigned(15 downto 0);

begin





PYLEROS_ALU_OP_ADD_SUB: process (dec_add_sub, opd, alu_op, acc) is
begin
    
    if (dec_add_sub = '0') then
        res_arith <= (acc + opd)(16-1 downto 0);
        
    else
        res_arith <= (signed(resize(acc, 17)) - signed(resize(opd, 17)))(16-1 downto 0);
    end if;
    if (alu_op = LD) then
        res_log <= opd;
    elsif (alu_op = AND) then
        res_log <= (acc and opd);
    elsif (alu_op = OR) then
        res_log <= (acc or opd);
    elsif (alu_op = XOR) then
        res_log <= (acc xor opd);
    end if;
end process PYLEROS_ALU_OP_ADD_SUB;


PYLEROS_ALU_ACC_MUX: process (res_arith, alu_op, ioin_rd_data, res_log, acc, dec_log_add, dec_inp, dec_shr) is
begin
    if (dec_log_add = '1') then
        pre_acc <= res_arith;
    elsif (dec_shr = '1') then
        pre_acc <= shift_right(acc, 1)(16-1 downto 0);
    elsif (dec_inp = '1') then
        pre_acc <= ioin_rd_data;
    elsif (not (alu_op = NOP)) then
        pre_acc <= res_log;
    end if;
end process PYLEROS_ALU_ACC_MUX;

end architecture MyHDL;
