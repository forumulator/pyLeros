-- File: ../generated/vhdl/pyleros_decoder.vhd
-- Generated by MyHDL 1.0dev
-- Date: Thu Aug 18 20:09:14 2016



package pck_pyleros_decoder is

attribute enum_encoding: string;

    type t_enum_alu_op_type_1 is (
    NOP,
    LD,
    AND,
    OR,
    XOR
);

end package pck_pyleros_decoder;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_10.all;

use work.pck_pyleros_decoder.all;

entity pyleros_decoder is
    port (
        instr_hi: in unsigned(7 downto 0);
        alu_op: out t_enum_alu_op_type_1;
        out_sig_outp: out std_logic;
        out_sig_indls: out std_logic;
        out_sig_log_add: out std_logic;
        out_sig_shr: out std_logic;
        out_sig_loadh: out std_logic;
        out_sig_store: out std_logic;
        out_sig_al_ena: out std_logic;
        out_sig_br_op: out std_logic;
        out_sig_inp: out std_logic;
        out_sig_ah_ena: out std_logic;
        out_sig_jal: out std_logic;
        out_sig_sel_imm: out std_logic;
        out_sig_add_sub: out std_logic
    );
end entity pyleros_decoder;
-- The decoder module for pyleros, decodes the high bits
-- of the instruction and generates the control signals. The modules is
-- purely combinatorial. 
-- 
-- Arguments (ports):
--     instr_hi: IN The high 8 bits of the instruction
--     op: Indicates the type of ALU operation
--     al_ena:  Enables the high bits of the accumulator
--         (Required when the value of the Acc changes)
--     ah_ena: Enables the low bits of the accumulator
--         (Required when the value of the Acc changes)
--     log_add: For ADD/SUB
--     add_sub: Switches between addition and subtration
--     shr: Signal shift right operation
--     sel_imm: Signal, enabled if o bit(indicating immediate value)
--         is high
--     store: Signal the store operation
--     outp: output in I/O
--     inp: input in I/O
--     br_op: Signal if the instructio is a branch
--     jal: Signal if the instructio is a jump and link
--     loadh: Signal if the instructio is a load high
--     indls: Signal if the instructio is a indirect load/store
-- 
-- Parameters:
--     debug: Debugging mode, the processor prints various error messages
--     

architecture MyHDL of pyleros_decoder is




begin





PYLEROS_DECODER_DECODER: process (instr_hi) is
    variable ins_ckh: integer;
begin
    
    alu_op <= NOP;
    out_sig_al_ena <= '0';
    out_sig_ah_ena <= '0';
    out_sig_log_add <= '0';
    out_sig_add_sub <= '0';
    out_sig_shr <= '0';
    out_sig_sel_imm <= '0';
    out_sig_store <= '0';
    out_sig_outp <= '0';
    out_sig_inp <= '0';
    out_sig_outp <= '0';
    out_sig_br_op <= '0';
    out_sig_jal <= '0';
    out_sig_loadh <= '0';
    out_sig_indls <= '0';
    ins_ckh := to_integer((instr_hi and to_unsigned(248, 8)));
    if (not (ins_ckh = 72)) then
        out_sig_sel_imm <= instr_hi(0);
    end if;
    case ins_ckh is
        when 0 =>
            null;
        when 1 =>
            out_sig_al_ena <= '1';
            out_sig_ah_ena <= '1';
            out_sig_log_add <= '1';
            out_sig_add_sub <= instr_hi(2);
        when 2 =>
            out_sig_al_ena <= '1';
            out_sig_ah_ena <= '1';
            out_sig_shr <= '1';
        when 3 =>
            null;
        when 4 =>
            out_sig_al_ena <= '1';
            out_sig_ah_ena <= '1';
        when 5 =>
            out_sig_loadh <= '1';
            out_sig_ah_ena <= '1';
        when 6 =>
            out_sig_store <= '1';
        when 7 =>
            if (instr_hi(2) = '0') then
                out_sig_outp <= '1';
            else
                out_sig_inp <= '1';
                out_sig_al_ena <= '1';
                out_sig_ah_ena <= '1';
            end if;
        when 8 =>
            out_sig_jal <= '1';
            out_sig_store <= '1';
        when 9 =>
            out_sig_br_op <= '1';
        when 10 =>
            null;
        when 11 =>
            out_sig_al_ena <= '1';
            out_sig_ah_ena <= '1';
            out_sig_indls <= '1';
        when 12 =>
            out_sig_indls <= '1';
            out_sig_store <= '1';
        when others =>
            out_sig_ah_ena <= '0';
            out_sig_al_ena <= '0';
    end case;
    if ((ins_ckh = 32) or (ins_ckh = 40) or (ins_ckh = 96)) then
        if (instr_hi(3-1 downto 1) = 0) then
            alu_op <= LD;
        elsif (instr_hi(3-1 downto 1) = 1) then
            alu_op <= AND;
        elsif (instr_hi(3-1 downto 1) = 2) then
            alu_op <= OR;
        elsif (instr_hi(3-1 downto 1) = 3) then
            alu_op <= XOR;
        else
            alu_op <= NOP;
        end if;
    end if;
end process PYLEROS_DECODER_DECODER;

end architecture MyHDL;
